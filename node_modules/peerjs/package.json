{
  "name": "peerjs",
  "version": "0.3.8",
  "description": "PeerJS client",
  "repository": {
    "type": "git",
    "url": "git://github.com/peers/peerjs.git"
  },
  "author": {
    "name": "Michelle Bu, Eric Zhang"
  },
  "license": "MIT",
  "devDependencies": {
    "uglify-js": "~1.3.4",
    "mocha": "*",
    "expect.js": "*"
  },
  "readme": "# PeerJS: Simple peer-to-peer with WebRTC #\n\nPeerJS provides a complete, configurable, and easy-to-use peer-to-peer API built on top of WebRTC, supporting both data channels and media streams.\n\n### [http://peerjs.com](http://peerjs.com)\n\n## Setup\n\n\n**Include the library**\n\n```html\n<script src=\"http://cdn.peerjs.com/0.3/peer.js\"></script>\n```\n\n**Create a Peer**  \nGet a [free API key](http://peerjs.com/peerserver). Your id only needs to be unique to the namespace of your API key.\n```javascript\nvar peer = new Peer('pick-an-id', {key: 'myapikey'}); \n// You can pick your own id or omit the id if you want to get a random one from the server.\n```\n\n## Data connections\n**Connect**\n```javascript\nvar conn = peer.connect('another-peers-id');\nconn.on('open', function(){\n  conn.send('hi!');\n});\n```\n**Receive**\n```javascript\npeer.on('connection', function(conn) {\n  conn.on('data', function(data){\n    // Will print 'hi!'\n    console.log(data);\n  });\n});\n```\n\n## Media calls\n**Call**\n```javascript\nnavigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\nnavigator.getUserMedia({video: true, audio: true}, function(stream) {\n  var call = peer.call('another-peers-id', stream);\n  call.on('stream', function(remoteStream) {\n    // Show stream in some <video> element.\n  });\n}, function(err) {\n  console.log('Failed to get local stream' ,err);\n});\n\n```\n**Answer**\n```javascript\nnavigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\npeer.on('call', function(call) {\n  navigator.getUserMedia({video: true, audio: true}, function(stream) {\n    call.answer(stream); // Answer the call with an A/V stream.\n    call.on('stream', function(remoteStream) {\n      // Show stream in some <video> element.\n    });\n  }, function(err) {\n    console.log('Failed to get local stream' ,err);\n  });\n});\n```\n## Links\n\n### [Documentation / API Reference](http://peerjs.com/docs)\n\n### [WebRTC Browser compatibility status](http://peerjs.com/status)\n\n### [PeerServer](https://github.com/peers/peerjs-server)\n\n### [Discuss PeerJS on our Google Group](https://groups.google.com/forum/?fromgroups#!forum/peerjs)\n\n### [Changelog](https://github.com/peers/peerjs/blob/master/changelog.md)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/peers/peerjs/issues"
  },
  "homepage": "https://github.com/peers/peerjs",
  "_id": "peerjs@0.3.8",
  "_shasum": "900eaf9de62c4b17feba4b80dd38a79700c8ed41",
  "_from": "peerjs@",
  "_resolved": "https://registry.npmjs.org/peerjs/-/peerjs-0.3.8.tgz"
}
