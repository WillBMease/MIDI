[
  {
    "name": "Peer",
    "type": "constructor",
    "snippet": "var peer = new Peer([id], [options]);",
    "description": "A Peer can connect to other peers and listen for connections.",
    "children": [
      {
        "name": "id",
        "optional": true,
        "type": "string",
        "description": "Other peers can connect to this peer using the provided ID. If no ID is given, one will be generated by the brokering server.<span class='tip'>It's not recommended that you use this ID to identify peers, as it's meant to be used for brokering connections only. You're recommended to set the <a href='#peerconnect-options-metadata'><code>metadata</code></a> option to send other identifying information.</span>"
      },
      {
        "name": "options",
        "optional": true,
        "type": "object",
        "children": [
          {
            "name": "key",
            "type": "string",
            "description": "API key for the cloud PeerServer. This is not used for servers other than <code>0.peerjs.com</code>."
          },
          {
            "name": "host",
            "type": "string",
            "description": "Server host. Defaults to <code>0.peerjs.com</code>. Also accepts <code>'/'</code> to signify relative hostname."
          },
          {
            "name": "port",
            "type": "number",
            "description": "Server port. Defaults to <code>80</code>."
          },
          {
            "name": "config",
            "type": "object",
            "description": "Configuration hash passed to RTCPeerConnection. This hash contains the ICE servers. Defaults to <code>{ 'iceServers': [{ 'url': 'stun:stun.l.google.com:19302' }] }</code>"
          },
          {
            "name": "debug",
            "type": "number",
            "description": "Prints log messages depending on the debug level passed in. Defaults to <code>0</code>.",
            "children": [
              {
                "name": 0,
                "description": "Prints no logs."
              },
              {
                "name": 1,
                "description": "Prints only errors."
              },
              {
                "name": 2,
                "description": "Prints errors and warnings."
              },
              {
                "name": 3,
                "description": "Prints all logs."
              }
            ]
          }
        ]
      }
    ]
  },

  {
    "name": "peer.connect",
    "type": "method",
    "snippet": "var <a href='#dataconnection'>dataConnection</a> = peer.connect(id, [options]);",
    "description": "Connects to the remote peer specified by <code>id</code>. Be sure to listen on the <a href='#peeron-error'><code>error</code></a> event in case the connection fails.",
    "children": [
      {
        "name": "id",
        "type": "string",
        "description": "The brokering ID of the remote peer (their <a href='#peerid'><code>peer.id</code></a>)."
      },
      {
        "name": "options",
        "optional": true,
        "type": "object",
        "children": [
          {
            "name": "label",
            "type": "string",
            "description": "A unique label by which you want to identify this data connection. If left unspecified, a label will be generated at random. Can be accessed with <a href='#dataconnection-label'><code>dataConnection.label</code></a>."
          },
          {
            "name": "metadata",
            "description": "Metadata associated with the connection, passed in by whoever initiated the connection. Can be accessed with <a href='#dataconnection-metadata'><code>dataConnection.metadata</code></a>. Can be any serializable type."
          },
          {
            "name": "serialization",
            "type": "string",
            "description": "Can be <code>binary</code> (default), <code>binary-utf8</code>, <code>json</code>, or <code>none</code>. Can be accessed with <a href='#dataconnection-serialization'><code>dataConnection.serialization</code></a>.<span class='tip'><code>binary-utf8</code> will take a performance hit because of the way UTF8 strings are packed into binary format.</span>"
          },
          {
            "name": "reliable",
            "type": "boolean",
            "description": "[TODO: document this]."
          }
        ]
      }
    ]
  },

  {
    "name": "peer.call [TODO]",
    "tags": ["beta (0.3.0)"],
    "type": "method",
    "snippet": "var <a href='#mediaconnection'>mediaConnection</a> = peer.call(id, [options]);",
    "description": "Does something",
    "children": [
      {
        "name": "id",
        "type": "string",
        "description": "Something else"
      }
    ]
  },

  {
    "name": "peer.id",
    "type": "string",
    "description": "The brokering ID of this peer. If no ID was specified in <a href='#peer'>the constructor</a>, this will be <code>undefined</code> until the <a href='peeron-open'><code>open</code></a> event is emitted."
  },

  {
    "name": "DataConnection",
    "type": "class",
    "description": "Wraps WebRTC's DataChannel. To get one, use <a href='#peerconnect'><code>peer.connect</code></a> or listen for the <a href='#peeron-connect'><code>connect</code></a> event.<span class='tip'>Because Chrome currently does not support reliable messaging, PeerJS uses the <a href='https://github.com/michellebu/reliable'>Reliable wrapper</a>. A caveat is that you will no longer be able to customize the serialization format used for data transfer.</span>",
    "children": [
      {
        "name": ".send",
        "type": "method",
        "snippet": "dataConnection.send(data);",
        "description": "<code>data</code> is serialized by BinaryPack by default and sent to the remote peer.",
        "children": {
          "name": "data",
          "description": "You can send any type of data, including objects, strings, and blobs."
        }
      },
      {
        "name": ".close",
        "type": "method",
        "snippet": "dataConnection.close();",
        "description": "Closes the data connection gracefully, cleaning up underlying DataChannels and PeerConnections."
      },
      {
        "name": ".on",
        "type": "method",
        "snippet": "dataConnection.on(event, callback);",
        "description": "Set listeners for data connection events.",
        "children": [
          {
            "name": "'data'",
            "type": "event",
            "snippet": "dataConnection.on('data', function(data) { ... });",
            "description": "Emitted when data is received from the remote peer."
          },
          {
            "name": "'open'",
            "type": "event",
            "snippet": "dataConnection.on('data', function() { ... });",
            "description": "Emitted when the connection is established and ready-to-use."
          },
          {
            "name": "'close'",
            "type": "event",
            "snippet": "dataConnection.on('close', function() { ... });",
            "description": "Emitted when either you or the remote peer closes the data connection."
          },
          {
            "name": "'error'",
            "type": "event",
            "snippet": "dataConnection.on('error', function(err) { ... });"
          }
        ]
      },
      {
        "name": ".label",
        "type": "string",
        "description": "The optional label passed in or assigned by PeerJS when the connection was initiated."
      },
      {
        "name": ".metadata",
        "description": "Any type of metadata associated with the connection, passed in by whoever initiated the connection."
      },
      {
        "name": ".serialization",
        "type": "string",
        "description": "The serialization format of the data sent over the connection. Can be <code>binary</code> (default), <code>binary-utf8</code>, <code>json</code>, or <code>none</code>."
      },
      {
        "name": ".open",
        "type": "boolean",
        "description": "This is true if the connection is open and ready for read/write."
      },
      {
        "name": ".peer",
        "type": "string",
        "description": "The ID of the Peer on the other end of this connection."
      },
      {
        "name": ".type",
        "type": "string",
        "description": "For data connections, this is always <code>'data'</code>."
      }
    ]
  },

  {
    "name": "MediaConnection",
    "type": "class",
    "tags": ["beta (0.3.0)"],
    "description": "Wraps WebRTC's media streams. To get one, use <a href='#peercall'><code>peer.call</code></a> or listen for the <a href='#peeron-call'><code>call</code></a> event.",
    "children": [
      {
        "name": ".answer",
        "type": "method",
        "snippet": "mediaConnection.answer([stream]);",
        "description": "When recieving a <a href='#peeron-call'><code>call</code></a> event on a Peer, you can call <code>.answer</code> on the media connection provided by the callback to accept the call and optionally send your own media stream.",
        "children": {
          "name": "stream",
          "optional": true,
          "type": "MediaStream",
          "description": "A WebRTC media stream from <a href='https://developer.mozilla.org/en-US/docs/Web/API/Navigator.getUserMedia'><code>getUserMedia</code></a>."
        }
      },
      {
        "name": ".close",
        "type": "method",
        "snippet": "mediaConnection.close();",
        "description": "Closes the media connection."
      },
      {
        "name": ".on",
        "type": "method",
        "snippet": "mediaConnection.on(event, callback);",
        "description": "Set listeners for media connection events.",
        "children": [
          {
            "name": "'stream'",
            "type": "event",
            "snippet": "mediaConnection.on('stream', function([stream]) { ... });",
            "description": "Emitted when the remote peer answers your call. <code>stream</code> is the media stream the remote peer added, if any."
          },
          {
            "name": "'close'",
            "type": "event",
            "snippet": "mediaConnection.on('close', function() { ... });",
            "description": "Emitted when either you or the remote peer closes the media connection."
          },
          {
            "name": "'error'",
            "type": "event",
            "snippet": "mediaConnection.on('error', function(err) { ... });"
          }
        ]
      },
      {
        "name": ".metadata",
        "description": "Any type of metadata associated with the connection, passed in by whoever initiated the connection."
      },
      {
        "name": ".peer",
        "type": "string",
        "description": "The ID of the Peer on the other end of this connection."
      },
      {
        "name": ".type",
        "type": "string",
        "description": "For media connections, this is always <code>'media'</code>."
      }
    ]
  },

  {
    "name": "util",
    "type": "object",
    "tags": ["utility"],
    "description": "Provides a variety of helpful utilities.<span class='tip'>Only the utilities documented here are guaranteed to be present on <code>util</code>. Undocumented utilities can be removed without warning. We don't consider these to be 'breaking changes.'</span>",
    "children": [
      {
        "name": ".browser",
        "type": "string",
        "snippet": "if (util.browser === 'Firefox') { /* OK to peer with Firefox peers. */ }",
        "description": "The current browser. This property can be useful in determining whether or not two peers can connect. For example, as of now data connections are not yet interoperable between major browsers. <code>util.browser</code> can currently have the values 'Firefox', 'Chrome', 'Unsupported', or 'Supported' (unknown WebRTC-compatible browser)."
      },
      {
        "name": ".supports",
        "type": "object",
        "snippet": "if (util.supports.data) { /* OK to start a data connection. */ }",
        "description": "A hash of WebRTC features mapped to booleans that correspond to whether the feature is supported by the current browser.<span class='tip'>Only the properties documented here are guaranteed to be present on <code>util.supports</code>.</span>",
        "children": [
          {
            "name": ".audioVideo",
            "type": "boolean",
            "description": "True if the current browser supports media streams and PeerConnection."
          },
          {
            "name": ".data",
            "type": "boolean",
            "description": "True if the current browser supports DataChannel and PeerConnection."
          },
          {
            "name": ".binary",
            "type": "boolean",
            "description": "True if the current browser supports binary DataChannels."
          },
          {
            "name": ".reliable",
            "type": "boolean",
            "description": "True if the current browser supports reliable DataChannels."
          }
        ]
      }
    ]
  }
]
